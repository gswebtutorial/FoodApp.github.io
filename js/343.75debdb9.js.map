{"version":3,"file":"js/343.75debdb9.js","mappings":"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","sources":["webpack://gstest/./node_modules/core-js/internals/string-trim-end.js","webpack://gstest/./node_modules/core-js/modules/es.string.trim-end.js","webpack://gstest/./node_modules/core-js/modules/es.string.trim-right.js","webpack://gstest/./node_modules/@stencil/core/internal/client/shadow-css.js"],"sourcesContent":["'use strict';\nvar $trimEnd = require('../internals/string-trim').end;\nvar forcedStringTrimMethod = require('../internals/string-trim-forced');\n\n// `String.prototype.{ trimEnd, trimRight }` method\n// https://tc39.es/ecma262/#sec-string.prototype.trimend\n// https://tc39.es/ecma262/#String.prototype.trimright\nmodule.exports = forcedStringTrimMethod('trimEnd') ? function trimEnd() {\n  return $trimEnd(this);\n// eslint-disable-next-line es/no-string-prototype-trimstart-trimend -- safe\n} : ''.trimEnd;\n","// TODO: Remove this line from `core-js@4`\nrequire('../modules/es.string.trim-right');\nvar $ = require('../internals/export');\nvar trimEnd = require('../internals/string-trim-end');\n\n// `String.prototype.trimEnd` method\n// https://tc39.es/ecma262/#sec-string.prototype.trimend\n// eslint-disable-next-line es/no-string-prototype-trimstart-trimend -- safe\n$({ target: 'String', proto: true, name: 'trimEnd', forced: ''.trimEnd !== trimEnd }, {\n  trimEnd: trimEnd\n});\n","var $ = require('../internals/export');\nvar trimEnd = require('../internals/string-trim-end');\n\n// `String.prototype.trimRight` method\n// https://tc39.es/ecma262/#sec-string.prototype.trimend\n// eslint-disable-next-line es/no-string-prototype-trimleft-trimright -- safe\n$({ target: 'String', proto: true, name: 'trimEnd', forced: ''.trimRight !== trimEnd }, {\n  trimRight: trimEnd\n});\n","/*\n Stencil Client Platform v2.20.0 | MIT Licensed | https://stenciljs.com\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nconst safeSelector = (selector) => {\n    const placeholders = [];\n    let index = 0;\n    // Replaces attribute selectors with placeholders.\n    // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n    selector = selector.replace(/(\\[[^\\]]*\\])/g, (_, keep) => {\n        const replaceBy = `__ph-${index}__`;\n        placeholders.push(keep);\n        index++;\n        return replaceBy;\n    });\n    // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n    // WS and \"+\" would otherwise be interpreted as selector separators.\n    const content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\n        const replaceBy = `__ph-${index}__`;\n        placeholders.push(exp);\n        index++;\n        return pseudo + replaceBy;\n    });\n    const ss = {\n        content,\n        placeholders,\n    };\n    return ss;\n};\nconst restoreSafeSelector = (placeholders, content) => {\n    return content.replace(/__ph-(\\d+)__/g, (_, index) => placeholders[+index]);\n};\nconst _polyfillHost = '-shadowcsshost';\nconst _polyfillSlotted = '-shadowcssslotted';\n// note: :host-context pre-processed to -shadowcsshostcontext.\nconst _polyfillHostContext = '-shadowcsscontext';\nconst _parenSuffix = ')(?:\\\\((' + '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' + ')\\\\))?([^,{]*)';\nconst _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\nconst _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\nconst _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\nconst _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\nconst _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nconst _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\nconst _selectorReSuffix = '([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$';\nconst _polyfillHostRe = /-shadowcsshost/gim;\nconst _colonHostRe = /:host/gim;\nconst _colonSlottedRe = /::slotted/gim;\nconst _colonHostContextRe = /:host-context/gim;\nconst _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\nconst stripComments = (input) => {\n    return input.replace(_commentRe, '');\n};\nconst _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nconst extractCommentsWithHash = (input) => {\n    return input.match(_commentWithHashRe) || [];\n};\nconst _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nconst _curlyRe = /([{}])/g;\nconst _selectorPartsRe = /(^.*?[^\\\\])??((:+)(.*)|$)/;\nconst OPEN_CURLY = '{';\nconst CLOSE_CURLY = '}';\nconst BLOCK_PLACEHOLDER = '%BLOCK%';\nconst processRules = (input, ruleCallback) => {\n    const inputWithEscapedBlocks = escapeBlocks(input);\n    let nextBlockIndex = 0;\n    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {\n        const selector = m[2];\n        let content = '';\n        let suffix = m[4];\n        let contentPrefix = '';\n        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n            contentPrefix = '{';\n        }\n        const cssRule = {\n            selector,\n            content,\n        };\n        const rule = ruleCallback(cssRule);\n        return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\n    });\n};\nconst escapeBlocks = (input) => {\n    const inputParts = input.split(_curlyRe);\n    const resultParts = [];\n    const escapedBlocks = [];\n    let bracketCount = 0;\n    let currentBlockParts = [];\n    for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {\n        const part = inputParts[partIndex];\n        if (part === CLOSE_CURLY) {\n            bracketCount--;\n        }\n        if (bracketCount > 0) {\n            currentBlockParts.push(part);\n        }\n        else {\n            if (currentBlockParts.length > 0) {\n                escapedBlocks.push(currentBlockParts.join(''));\n                resultParts.push(BLOCK_PLACEHOLDER);\n                currentBlockParts = [];\n            }\n            resultParts.push(part);\n        }\n        if (part === OPEN_CURLY) {\n            bracketCount++;\n        }\n    }\n    if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(''));\n        resultParts.push(BLOCK_PLACEHOLDER);\n    }\n    const strEscapedBlocks = {\n        escapedString: resultParts.join(''),\n        blocks: escapedBlocks,\n    };\n    return strEscapedBlocks;\n};\nconst insertPolyfillHostInCssText = (selector) => {\n    selector = selector\n        .replace(_colonHostContextRe, _polyfillHostContext)\n        .replace(_colonHostRe, _polyfillHost)\n        .replace(_colonSlottedRe, _polyfillSlotted);\n    return selector;\n};\nconst convertColonRule = (cssText, regExp, partReplacer) => {\n    // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\n    return cssText.replace(regExp, (...m) => {\n        if (m[2]) {\n            const parts = m[2].split(',');\n            const r = [];\n            for (let i = 0; i < parts.length; i++) {\n                const p = parts[i].trim();\n                if (!p)\n                    break;\n                r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n            }\n            return r.join(',');\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n};\nconst colonHostPartReplacer = (host, part, suffix) => {\n    return host + part.replace(_polyfillHost, '') + suffix;\n};\nconst convertColonHost = (cssText) => {\n    return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\n};\nconst colonHostContextPartReplacer = (host, part, suffix) => {\n    if (part.indexOf(_polyfillHost) > -1) {\n        return colonHostPartReplacer(host, part, suffix);\n    }\n    else {\n        return host + part + suffix + ', ' + part + ' ' + host + suffix;\n    }\n};\nconst convertColonSlotted = (cssText, slotScopeId) => {\n    const slotClass = '.' + slotScopeId + ' > ';\n    const selectors = [];\n    cssText = cssText.replace(_cssColonSlottedRe, (...m) => {\n        if (m[2]) {\n            const compound = m[2].trim();\n            const suffix = m[3];\n            const slottedSelector = slotClass + compound + suffix;\n            let prefixSelector = '';\n            for (let i = m[4] - 1; i >= 0; i--) {\n                const char = m[5][i];\n                if (char === '}' || char === ',') {\n                    break;\n                }\n                prefixSelector = char + prefixSelector;\n            }\n            const orgSelector = prefixSelector + slottedSelector;\n            const addedSelector = `${prefixSelector.trimRight()}${slottedSelector.trim()}`;\n            if (orgSelector.trim() !== addedSelector.trim()) {\n                const updatedSelector = `${addedSelector}, ${orgSelector}`;\n                selectors.push({\n                    orgSelector,\n                    updatedSelector,\n                });\n            }\n            return slottedSelector;\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n    return {\n        selectors,\n        cssText,\n    };\n};\nconst convertColonHostContext = (cssText) => {\n    return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\n};\nconst convertShadowDOMSelectors = (cssText) => {\n    return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, ' '), cssText);\n};\nconst makeScopeMatcher = (scopeSelector) => {\n    const lre = /\\[/g;\n    const rre = /\\]/g;\n    scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n    return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n};\nconst selectorNeedsScoping = (selector, scopeSelector) => {\n    const re = makeScopeMatcher(scopeSelector);\n    return !re.test(selector);\n};\nconst injectScopingSelector = (selector, scopingSelector) => {\n    return selector.replace(_selectorPartsRe, (_, before = '', _colonGroup, colon = '', after = '') => {\n        return before + scopingSelector + colon + after;\n    });\n};\nconst applySimpleSelectorScope = (selector, scopeSelector, hostSelector) => {\n    // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n    _polyfillHostRe.lastIndex = 0;\n    if (_polyfillHostRe.test(selector)) {\n        const replaceBy = `.${hostSelector}`;\n        return selector\n            .replace(_polyfillHostNoCombinatorRe, (_, selector) => injectScopingSelector(selector, replaceBy))\n            .replace(_polyfillHostRe, replaceBy + ' ');\n    }\n    return scopeSelector + ' ' + selector;\n};\nconst applyStrictSelectorScope = (selector, scopeSelector, hostSelector) => {\n    const isRe = /\\[is=([^\\]]*)\\]/g;\n    scopeSelector = scopeSelector.replace(isRe, (_, ...parts) => parts[0]);\n    const className = '.' + scopeSelector;\n    const _scopeSelectorPart = (p) => {\n        let scopedP = p.trim();\n        if (!scopedP) {\n            return '';\n        }\n        if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n            scopedP = applySimpleSelectorScope(p, scopeSelector, hostSelector);\n        }\n        else {\n            // remove :host since it should be unnecessary\n            const t = p.replace(_polyfillHostRe, '');\n            if (t.length > 0) {\n                scopedP = injectScopingSelector(t, className);\n            }\n        }\n        return scopedP;\n    };\n    const safeContent = safeSelector(selector);\n    selector = safeContent.content;\n    let scopedSelector = '';\n    let startIndex = 0;\n    let res;\n    const sep = /( |>|\\+|~(?!=))\\s*/g;\n    // If a selector appears before :host it should not be shimmed as it\n    // matches on ancestor elements and not on elements in the host's shadow\n    // `:host-context(div)` is transformed to\n    // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n    // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n    // Historically `component-tag:host` was matching the component so we also want to preserve\n    // this behavior to avoid breaking legacy apps (it should not match).\n    // The behavior should be:\n    // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n    // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n    //   `:host-context(tag)`)\n    const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n    // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n    let shouldScope = !hasHost;\n    while ((res = sep.exec(selector)) !== null) {\n        const separator = res[1];\n        const part = selector.slice(startIndex, res.index).trim();\n        shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n        const scopedPart = shouldScope ? _scopeSelectorPart(part) : part;\n        scopedSelector += `${scopedPart} ${separator} `;\n        startIndex = sep.lastIndex;\n    }\n    const part = selector.substring(startIndex);\n    shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n    scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n    // replace the placeholders with their original values\n    return restoreSafeSelector(safeContent.placeholders, scopedSelector);\n};\nconst scopeSelector = (selector, scopeSelectorText, hostSelector, slotSelector) => {\n    return selector\n        .split(',')\n        .map((shallowPart) => {\n        if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\n            return shallowPart.trim();\n        }\n        if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\n            return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\n        }\n        else {\n            return shallowPart.trim();\n        }\n    })\n        .join(', ');\n};\nconst scopeSelectors = (cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) => {\n    return processRules(cssText, (rule) => {\n        let selector = rule.selector;\n        let content = rule.content;\n        if (rule.selector[0] !== '@') {\n            selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\n        }\n        else if (rule.selector.startsWith('@media') ||\n            rule.selector.startsWith('@supports') ||\n            rule.selector.startsWith('@page') ||\n            rule.selector.startsWith('@document')) {\n            content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\n        }\n        const cssRule = {\n            selector: selector.replace(/\\s{2,}/g, ' ').trim(),\n            content,\n        };\n        return cssRule;\n    });\n};\nconst scopeCssText = (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) => {\n    cssText = insertPolyfillHostInCssText(cssText);\n    cssText = convertColonHost(cssText);\n    cssText = convertColonHostContext(cssText);\n    const slotted = convertColonSlotted(cssText, slotScopeId);\n    cssText = slotted.cssText;\n    cssText = convertShadowDOMSelectors(cssText);\n    if (scopeId) {\n        cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\n    }\n    cssText = cssText.replace(/-shadowcsshost-no-combinator/g, `.${hostScopeId}`);\n    cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\n    return {\n        cssText: cssText.trim(),\n        slottedSelectors: slotted.selectors,\n    };\n};\nconst scopeCss = (cssText, scopeId, commentOriginalSelector) => {\n    const hostScopeId = scopeId + '-h';\n    const slotScopeId = scopeId + '-s';\n    const commentsWithHash = extractCommentsWithHash(cssText);\n    cssText = stripComments(cssText);\n    const orgSelectors = [];\n    if (commentOriginalSelector) {\n        const processCommentedSelector = (rule) => {\n            const placeholder = `/*!@___${orgSelectors.length}___*/`;\n            const comment = `/*!@${rule.selector}*/`;\n            orgSelectors.push({ placeholder, comment });\n            rule.selector = placeholder + rule.selector;\n            return rule;\n        };\n        cssText = processRules(cssText, (rule) => {\n            if (rule.selector[0] !== '@') {\n                return processCommentedSelector(rule);\n            }\n            else if (rule.selector.startsWith('@media') ||\n                rule.selector.startsWith('@supports') ||\n                rule.selector.startsWith('@page') ||\n                rule.selector.startsWith('@document')) {\n                rule.content = processRules(rule.content, processCommentedSelector);\n                return rule;\n            }\n            return rule;\n        });\n    }\n    const scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\n    cssText = [scoped.cssText, ...commentsWithHash].join('\\n');\n    if (commentOriginalSelector) {\n        orgSelectors.forEach(({ placeholder, comment }) => {\n            cssText = cssText.replace(placeholder, comment);\n        });\n    }\n    scoped.slottedSelectors.forEach((slottedSelector) => {\n        cssText = cssText.replace(slottedSelector.orgSelector, slottedSelector.updatedSelector);\n    });\n    return cssText;\n};\n\nexport { scopeCss };\n"],"names":["$trimEnd","forcedStringTrimMethod","module","exports","this","trimEnd","$","target","proto","name","forced","trimRight","safeSelector","selector","placeholders","index","replace","_","keep","replaceBy","push","content","pseudo","exp","ss","restoreSafeSelector","_polyfillHost","_polyfillSlotted","_polyfillHostContext","_parenSuffix","_cssColonHostRe","RegExp","_cssColonHostContextRe","_cssColonSlottedRe","_polyfillHostNoCombinator","_polyfillHostNoCombinatorRe","_shadowDOMSelectorsRe","_selectorReSuffix","_polyfillHostRe","_colonHostRe","_colonSlottedRe","_colonHostContextRe","_commentRe","stripComments","input","_commentWithHashRe","extractCommentsWithHash","match","_ruleRe","_curlyRe","_selectorPartsRe","OPEN_CURLY","CLOSE_CURLY","BLOCK_PLACEHOLDER","processRules","ruleCallback","inputWithEscapedBlocks","escapeBlocks","nextBlockIndex","escapedString","suffix","contentPrefix","startsWith","blocks","substring","length","cssRule","rule","inputParts","split","resultParts","escapedBlocks","bracketCount","currentBlockParts","partIndex","part","join","strEscapedBlocks","insertPolyfillHostInCssText","convertColonRule","cssText","regExp","partReplacer","m","parts","r","i","p","trim","colonHostPartReplacer","host","convertColonHost","colonHostContextPartReplacer","indexOf","convertColonSlotted","slotScopeId","slotClass","selectors","compound","slottedSelector","prefixSelector","char","orgSelector","addedSelector","updatedSelector","convertColonHostContext","convertShadowDOMSelectors","reduce","result","pattern","makeScopeMatcher","scopeSelector","lre","rre","selectorNeedsScoping","re","test","injectScopingSelector","scopingSelector","before","colon","after","applySimpleSelectorScope","hostSelector","lastIndex","applyStrictSelectorScope","isRe","className","_scopeSelectorPart","scopedP","t","safeContent","res","scopedSelector","startIndex","sep","hasHost","shouldScope","exec","separator","slice","scopedPart","scopeSelectorText","slotSelector","map","shallowPart","scopeSelectors","commentOriginalSelector","scopeCssText","scopeId","hostScopeId","slotted","slottedSelectors","scopeCss","commentsWithHash","orgSelectors","processCommentedSelector","placeholder","comment","scoped","forEach"],"sourceRoot":""}